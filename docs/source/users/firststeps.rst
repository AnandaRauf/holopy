First steps
===========

Initially you'll probably find it helpful to work from a python shell
such as ipython.


Holopy can work with many types of data, but we use it most for working with digital holographic images, so we will start with an example of such.  

.. _loading:

Loading and viewing a hologram
------------------------------

Let's say you have a digital hologram stored in the file
``image0001.tif``.  Holopy can import many different image formats,
including TIFF files, numpy data format files, and any image format
that can be handled by the Python Imaging Library.  But it's always
good to load your images in Holopy and view them to see if they are
imported correctly.  You can do this as follows

.. sourcecode:: ipython

   In [1]: import holopy

   In [2]: holo = holopy.load('image0001.tif')

The function :func:`holopy.load` (which is an alias to
:func:`holopy.io.load` returns an 2 dimensional Data array.  You can view it:

.. sourcecode:: ipython

   In [3]: holopy.show(holo)

You can do math or image processing operations on ``holo`` just like
you would for a normal `numpy <http://numpy.scipy.org/>`_ array.  For
example (note you need to ``import scipy`` for these to work)::

    filtered_image = scipy.ndimage.uniform_filter(holo, [10,10])
    ffted_image = scipy.fftpack.fft2(holo)

.. _metadata:

Telling holopy about your optical train
---------------------------------------

The data object generated by simply loading a TIFF is not actually valid for analysis because it does not contain any information about the positions of the pixel measurements or the manner in which it was recorded. This additional information is referred to as :dfn:`metadata` and you should provide such metadata whenever you want to do real calculations on your data.  

In Holopy this metadata is stored in a Metadata object which should be associated with data objects.  Because of the prime importance of metadata, the hp.load supports associating it with Data as it is loaded

.. sourcecode:: ipython

   In [1]: import holopy

   In [2]: meta = holopy.Metadata(wavelen=658e-9, index=1.33, pixel_scale=[0.1e-6,0.1e-6])

   In [3]: holo = holopy.load('image0001.tif', metadata=meta)

In the first line above we create an instance of the Metadata containing the imaging laser wavelength, the medium refractive index, and the pixel size of the camera in the imaging plane.  You can specify more metadata, but this is all we need for now.  The second line loads the image data, associates the metadata with it and returns the Data.

You can also specify a :dfn:`background image`, which will
automatically be subtracted (or divided) from the hologram before fitting and reconstruction.  You might do this to correct for dust or other flaws in the optical train:

.. sourcecode:: ipython

    In [3]: holo = holopy.load('image0001.tif', metadata=meta, bg='../bg01.tif')

.. note::

    The wavelength specified in the Metadata object
    is that in vacuum. When the hologram is reconstructed, the wavelength in the medium is used. The wavelength in medium is available as:

    .. sourcecode:: ipython

        In [4]: meta.med_wavelen
        Out[4]: 4.653e-7


Using YAML files
----------------

Holopy can save and load all of its objects from `YAML
<http://www.yaml.org/>`_ files.  These designed to be both human and
computer readable and provide both our serialization format, and an alternative method for specifying things like optical metadata.

You can save an optics object for future use::

  holopy.save('meta.yaml', meta)

opts.yaml will look something like this (yours will not contain the explanatory comments, you can add any comments you want by proceedin them with a '#" character)::

  !Metadata
  wavelen: 658e-9                      # Wavelength of light (in vacuum) used in creating holograms
  polarization: [0., 1.0]
  divergence: 0
  pixel_scale: [.1151e-6, .1151e-6]    # Size of camera pixel in the image plane
  index: 1.33                          # Index of medium

You can also write this file by hand.  In either case you can make an :class:`holopy.optics.Optics` object from the file ::

		 meta = holopy.load('meta.yaml')

:func:`holopy.load()` will also accept the filename of an metadata yaml
file as the argument for the optics parameter and automatically load
the yaml file. ::

  holo = holopy.load('image0001.tif', optics='meta.yaml', bg='../bg01.tif')

.. Note::
   
   Data objects are a special case for yaml output because they contain image data.  They can still be saved,
   but will generate very large files that may not be easily opened in
   a text editor like other holopy yamls.

   For the curious advanced user, what we actually do is put a yaml
   header with optics and other information, and then encode the image
   data as a .npy binary (as from np.save) all in the same file.  This
   keeps the whole hologram in a single file, but generates a file
   that is not quite as easy to work with as other yamls.  